#!/usr/bin/env python3

import argparse, gpg, os, json, configparser
import nanopy as npy
from nanopy.rpc import RPC


class bcolors:
    ok1 = "\033[34m"
    ok2 = "\033[35m"
    ok3 = "\033[32m"
    warn1 = "\033[33m"
    warn2 = "\033[31m"
    end = "\033[0m"
    bold = "\033[1m"


def get_no_value_options(section):
    try:
        options = config.options(section)
    except:
        return None
    try:
        options.remove("tor")
    except:
        pass
    try:
        options.remove("rpc")
    except:
        pass
    try:
        options.remove("offline")
    except:
        pass
    try:
        options.remove("account")
    except:
        pass
    try:
        options.remove("frontier")
    except:
        pass
    try:
        options.remove("balance")
    except:
        pass
    try:
        options.remove("representative")
    except:
        pass
    return options


def println(label, colour, amount):
    print(label + " :", colour + "{:>40}".format(amount) + bcolors.end, std_unit)


def gpg_encrypt(secret, filename):
    cipher, _, _ = gpg_ctx.encrypt(secret.encode(), sign=False)
    print(filename)
    if args.demo:
        print(bcolors.warn1, "demo mode", bcolors.end)
    else:
        print(cipher.decode())
        with open(filename, "wb") as f:
            f.write(cipher)


def generate_block(sk, pk, account):
    nb = npy.state_block()
    nb["account"] = account
    print("Acc :", nb["account"])

    info = {"error": "Account not found"}
    rb = {}
    state_found = False
    for state in states:
        if config[state]["account"] == nb["account"]:
            state_found = True
            break

    while True:
        if online:
            info = rpc.account_info(nb["account"], representative=True)
            rb = rpc.accounts_pending([nb["account"]])["blocks"][nb["account"]]
        elif state_found:
            try:
                info["frontier"] = config[state]["frontier"]
                info["balance"] = config[state]["balance"]
                info["representative"] = config[state]["representative"]
            except:
                pass
            rb = get_no_value_options(state)
        try:
            nb["previous"] = info["frontier"]
            nb["balance"] = info["balance"]
            nb["representative"] = info["representative"]
            println("Bal", bcolors.ok1, npy.from_raw(nb["balance"]))
            print("Rep :", nb["representative"])

            if online:
                try:  # nag users to change representative
                    if (
                        int(
                            rpc.account_info(nb["representative"], weight=True)[
                                "weight"
                            ]
                        )
                        * 100
                        / available_supply
                        > 2
                        and not args.rep
                    ):
                        print(
                            bcolors.warn1,
                            "\nYour representative has too much voting weight.",
                            bcolors.end,
                        )
                        if (
                            input(
                                "Change rep?("
                                + bcolors.bold
                                + "y"
                                + bcolors.end
                                + "/n): "
                            )
                            or "y"
                        ) == "y":
                            args.rep = input("Rep : ")
                except:
                    pass

            if args.rep:
                assert npy.validate_account_number(args.rep)
                nb["representative"] = args.rep

            if (not args.send) and (not args.rep):
                if state_found and online:
                    config[state]["frontier"] = info["frontier"]
                    config[state]["balance"] = info["balance"]
                    config[state]["representative"] = info["representative"]
                    with open(config_file, "w") as f:
                        config.write(f)
                if not rb:
                    break
                if (
                    input(
                        "\nReceive pending blocks?("
                        + bcolors.bold
                        + "y"
                        + bcolors.end
                        + "/n): "
                    )
                    or "y"
                ) != "y":
                    break

        except KeyError:
            if not rb:
                print(bcolors.warn2, info, bcolors.end)
                break
            else:
                args.send = None
                nb["balance"] = "0"
                println("Bal", bcolors.ok1, npy.from_raw(nb["balance"]))
                nb["representative"] = input("Rep : ")

        if args.send:
            nb["link"] = npy.account_key(args.send)
            print("\nTo  :", npy.account_get(nb["link"]))
            if args.empty:
                println("Amt", bcolors.warn2, npy.from_raw(nb["balance"]))
                nb["balance"] = "0"
            else:
                while True:
                    amount = int(npy.to_raw(input("Amt : ")))
                    if amount <= int(nb["balance"]):
                        nb["balance"] = str(int(nb["balance"]) - amount)
                        break
                    print(
                        bcolors.warn2,
                        "Amount must be less than or equal to balance.",
                        bcolors.end,
                    )
            println("Bal", bcolors.warn1, npy.from_raw(nb["balance"]))

        elif rb:
            nb["link"] = rb[0]
            if online:
                r_block = rpc.blocks_info(rb)["blocks"][nb["link"]]
                print("\nFrom:", r_block["block_account"])
                amount = r_block["amount"]
                nb["balance"] = str(int(nb["balance"]) + int(amount))
            else:
                amount = config[state][rb[0]]
                nb["balance"] = str(int(nb["balance"]) + int(amount))
            println("Amt", bcolors.ok3, npy.from_raw(amount))
            println("Bal", bcolors.ok3, npy.from_raw(nb["balance"]))

        if args.send or args.rep or rb:
            current_difficulty = None
            if args.network == "nano":
                current_difficulty = "fffffff800000000"  # 8x
                if rb:
                    current_difficulty = "fffffe0000000000"  # 1/8x

            args.send = None
            args.rep = None

            work_hash = (
                nb["previous"]
                if (nb["previous"] != "0" * 64)
                else npy.account_key(nb["account"])
            )

            nb["work"] = npy.work_generate(work_hash, difficulty=current_difficulty)
            nb["signature"] = npy.sign(sk, block=nb, pk=pk)

            print("\n" + json.dumps(nb))

            if (
                input(
                    "\n"
                    + ("Broadcast block" if online else "Update state")
                    + "?(y/"
                    + bcolors.bold
                    + "n"
                    + bcolors.end
                    + "): "
                )
                or "n"
            ) == "y":
                if args.demo:
                    print(bcolors.warn1, "demo mode", bcolors.end)
                else:
                    if online:
                        ack = rpc.process(json.dumps(nb))
                        try:
                            print(bcolors.ok3, ack["hash"], bcolors.end)
                        except:
                            print(bcolors.warn2, ack, bcolors.end)
                            state_found = False
                    if state_found:
                        config[state]["frontier"] = npy.block_hash(nb)
                        config[state]["balance"] = nb["balance"]
                        config[state]["representative"] = nb["representative"]
                        if rb:
                            try:
                                config.remove_option(state, rb[0])
                            except:
                                pass
                        with open(config_file, "w") as f:
                            config.write(f)
                        print(
                            bcolors.ok3, "saved new state to", config_file, bcolors.end
                        )


parser = argparse.ArgumentParser()

subparsers = parser.add_subparsers()
parser_open = subparsers.add_parser("open", help="Unlock GPG encrypted wallet")
parser_open.add_argument(
    "f", metavar="FILE", type=argparse.FileType("rb"), help="Decrypt seed from FILE."
)
parser_open.add_argument(
    "-i",
    "--index",
    default=0,
    type=int,
    help="Index of the account unlocked from the seed. (Default=0)",
)
parser_open.add_argument(
    "-r", "--rep", metavar="ADDRESS", help="Change representative to ADDRESS."
)
parser_open.add_argument("--offline", action="store_true", help="Run in offline mode.")

open_group = parser_open.add_mutually_exclusive_group()
open_group.add_argument("-s", "--send", metavar="ADDRESS", help="Send NANO to ADDRESS.")
open_group.add_argument(
    "-e", "--empty", metavar="ADDRESS", help="Send all the funds to ADDRESS."
)
open_group.add_argument(
    "-p", "--password", action="store_true", help="Change password of FILE."
)
open_group.add_argument(
    "-a",
    "--audit",
    action="store_true",
    help="Check state of all accounts from index 0 to INDEX.",
)

parser.add_argument(
    "--new",
    action="store_true",
    help="Generate a new account and output the GPG encrypted seed.",
)
parser.add_argument(
    "-a",
    "--audit-file",
    metavar="FILE",
    type=argparse.FileType("rb"),
    help="Check state of all the accounts in FILE.",
)
parser.add_argument(
    "-b", "--broadcast", action="store_true", help="Broadcast a block in JSON format."
)
parser.add_argument(
    "-n",
    "--network",
    default="nano",
    choices=["nano", "beta", "banano"],
    type=str,
    help="Choose the network to interact with.",
)
parser.add_argument(
    "-t", "--tor", action="store_true", help="Connect to the RPC node via tor."
)
parser.add_argument("-d", "--demo", action="store_true", help="Run in demo mode.")
parser.add_argument("--reset", action="store_true", help="Reset configuration.")

args = parser.parse_args()

if args.network == "beta":
    npy.account_prefix = "xrb_"
    rpc_url = "http://localhost:55000"
    std_unit = "β"
    available_supply = 340272367920938463463374607431768151531
elif args.network in ["banano", "ban"]:
    args.network = "banano"
    npy.account_prefix = "ban_"
    npy.work_difficulty = "fffffe0000000000"
    npy.standard_exponent = 29
    rpc_url = "http://localhost:7072"
    std_unit = "BAN"
    available_supply = 340280899595938463463374589668199818054
else:
    args.network = "nano"
    rpc_url = "http://localhost:7076"
    std_unit = "Ӿ"
    available_supply = 133248061999106578273467128948453216035

home_npy = os.path.expanduser("~") + "/.config/nanopy/"
os.makedirs(home_npy, mode=0o700, exist_ok=True)
os.chmod(home_npy, 0o700)

if not os.path.exists(home_npy + "gpg.conf") or args.reset:
    with open(home_npy + "gpg.conf", "w") as f:
        f.write(
            """no-symkey-cache
s2k-mode 3
s2k-count 65011712
s2k-digest-algo SHA512
s2k-cipher-algo AES256"""
        )
os.chmod(home_npy + "gpg.conf", 0o600)
gpg_ctx = gpg.Context(armor=True, home_dir=home_npy)

config_file = home_npy + args.network + ".conf"
os.chmod(config_file, 0o600)
config = configparser.ConfigParser(allow_no_value=True)
config.read(config_file)

states = config.sections()
try:
    states.remove("Accounts")
except:
    pass

online = not config["DEFAULT"].getboolean("offline")
if online:
    try:
        online = not args.offline
    except:
        online = True

if online:
    try:
        iploc = RPC(
            url="http://ipinfo.io/json",
            tor=(args.tor or config["DEFAULT"].getboolean("tor", fallback=args.tor)),
        )._get()
        try:
            print(bcolors.warn1, iploc["city"], iploc["country"], bcolors.end)
        except:
            print(iploc)
    except:
        pass
    rpc = RPC(
        url=config["DEFAULT"].get("rpc", fallback=rpc_url),
        tor=(args.tor or config["DEFAULT"].getboolean("tor", fallback=args.tor)),
    )
else:
    print(bcolors.warn1, "Running in offline mode.", bcolors.end)

try:
    unlock = args.f != None
    if args.demo:
        print(bcolors.warn1, "Running in demo mode.", bcolors.end)
    if args.empty:
        args.send = args.empty
except:
    unlock = False

accounts = []

if args.new:
    seed = os.urandom(32).hex()
    _, _, account0 = npy.deterministic_key(seed, 0)
    gpg_encrypt(seed, account0 + ".asc")

elif args.audit_file:
    accounts = [line.rstrip(b"\n").decode() for line in args.audit_file]

elif unlock:
    seed = gpg_ctx.decrypt(args.f.read())[0].decode()
    args.f.close()

    if args.audit:
        for i in range(args.index + 1):
            _, _, account_i = npy.deterministic_key(seed, i)
            accounts.append(account_i)

    elif args.password:
        if (
            input("Change password" + "?(y/" + bcolors.bold + "n" + bcolors.end + "): ")
            or "n"
        ) == "y":
            gpg_encrypt(seed, args.f.name)

    else:
        generate_block(*npy.deterministic_key(seed, args.index))

elif args.broadcast and online:
    bb = json.dumps(json.loads(input("Enter JSON block to broadcast: ")))
    if args.demo:
        print(bcolors.warn1, "demo mode", bcolors.end)
    else:
        ack = rpc.process(bb)
        try:
            print(bcolors.ok3, ack["hash"], bcolors.end)
        except:
            print(bcolors.warn2, ack, bcolors.end)

else:
    accounts = get_no_value_options("Accounts")

if accounts and online:
    info = rpc.accounts_balances(accounts)
    for account in accounts:
        print("Acc :", account)
        try:
            println(
                "Bal", bcolors.ok1, npy.from_raw(info["balances"][account]["balance"])
            )
            if int(info["balances"][account]["pending"]):
                print(bcolors.ok3, "Pending block(s)", bcolors.end)
            print("")
        except:
            print(bcolors.warn2, info, bcolors.end, "\n")

if online:
    rpc.disconnect()

ticker = RPC(
    url="https://api.kraken.com/0/public/Ticker?pair=nanoxbt,nanousd,nanoeur"
)._get()
try:
    print(
        ticker["result"]["NANOXBT"]["c"][0],
        "₿\t",
        ticker["result"]["NANOUSD"]["c"][0],
        "$\t",
        ticker["result"]["NANOEUR"]["c"][0],
        "€",
    )
except:
    print(ticker)
